

// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
	#ifndef UNIFFI_SHARED_HEADER_V4
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_ldk_node_cc4c_Builder_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void* ldk_node_cc4c_Builder_new(
	RustCallStatus* out_status
);

void* ldk_node_cc4c_Builder_from_config(
	RustBuffer config,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_entropy_seed_path(
	void* ptr,
	RustBuffer seed_path,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_entropy_seed_bytes(
	void* ptr,
	RustBuffer seed_bytes,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_entropy_bip39_mnemonic(
	void* ptr,
	RustBuffer mnemonic,
	RustBuffer passphrase,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_esplora_server(
	void* ptr,
	RustBuffer esplora_server_url,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_gossip_source_p2p(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_gossip_source_rgs(
	void* ptr,
	RustBuffer rgs_server_url,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_storage_dir_path(
	void* ptr,
	RustBuffer storage_dir_path,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_network(
	void* ptr,
	RustBuffer network,
	RustCallStatus* out_status
);

void ldk_node_cc4c_Builder_set_listening_address(
	void* ptr,
	RustBuffer listening_address,
	RustCallStatus* out_status
);

void* ldk_node_cc4c_Builder_build(
	void* ptr,
	RustCallStatus* out_status
);

void ffi_ldk_node_cc4c_LDKNode_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_start(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_stop(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_next_event(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_wait_next_event(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_event_handled(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_node_id(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_listening_address(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_new_onchain_address(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_send_to_onchain_address(
	void* ptr,
	RustBuffer address,
	uint64_t amount_msat,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_send_all_to_onchain_address(
	void* ptr,
	RustBuffer address,
	RustCallStatus* out_status
);

uint64_t ldk_node_cc4c_LDKNode_spendable_onchain_balance_sats(
	void* ptr,
	RustCallStatus* out_status
);

uint64_t ldk_node_cc4c_LDKNode_total_onchain_balance_sats(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_connect(
	void* ptr,
	RustBuffer node_id,
	RustBuffer address,
	int8_t persist,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_disconnect(
	void* ptr,
	RustBuffer node_id,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_connect_open_channel(
	void* ptr,
	RustBuffer node_id,
	RustBuffer address,
	uint64_t channel_amount_sats,
	RustBuffer push_to_counterparty_msat,
	RustBuffer channel_config,
	int8_t announce_channel,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_close_channel(
	void* ptr,
	RustBuffer channel_id,
	RustBuffer counterparty_node_id,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_update_channel_config(
	void* ptr,
	RustBuffer channel_id,
	RustBuffer counterparty_node_id,
	void* channel_config,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_sync_wallets(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_send_payment(
	void* ptr,
	RustBuffer invoice,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_send_payment_using_amount(
	void* ptr,
	RustBuffer invoice,
	uint64_t amount_msat,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_send_spontaneous_payment(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer node_id,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_send_payment_probe(
	void* ptr,
	RustBuffer invoice,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_send_spontaneous_payment_probe(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer node_id,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_receive_payment(
	void* ptr,
	uint64_t amount_msat,
	RustBuffer description,
	uint32_t expiry_secs,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_receive_variable_amount_payment(
	void* ptr,
	RustBuffer description,
	uint32_t expiry_secs,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_payment(
	void* ptr,
	RustBuffer payment_hash,
	RustCallStatus* out_status
);

void ldk_node_cc4c_LDKNode_remove_payment(
	void* ptr,
	RustBuffer payment_hash,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_list_payments(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_list_peers(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_list_channels(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_LDKNode_sign_message(
	void* ptr,
	RustBuffer msg,
	RustCallStatus* out_status
);

int8_t ldk_node_cc4c_LDKNode_verify_signature(
	void* ptr,
	RustBuffer msg,
	RustBuffer sig,
	RustBuffer pkey,
	RustCallStatus* out_status
);

int8_t ldk_node_cc4c_LDKNode_is_running(
	void* ptr,
	RustCallStatus* out_status
);

void ffi_ldk_node_cc4c_ChannelConfig_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void* ldk_node_cc4c_ChannelConfig_new(
	RustCallStatus* out_status
);

uint32_t ldk_node_cc4c_ChannelConfig_forwarding_fee_proportional_millionths(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_forwarding_fee_proportional_millionths(
	void* ptr,
	uint32_t value,
	RustCallStatus* out_status
);

uint32_t ldk_node_cc4c_ChannelConfig_forwarding_fee_base_msat(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_forwarding_fee_base_msat(
	void* ptr,
	uint32_t fee_msat,
	RustCallStatus* out_status
);

uint16_t ldk_node_cc4c_ChannelConfig_cltv_expiry_delta(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_cltv_expiry_delta(
	void* ptr,
	uint16_t value,
	RustCallStatus* out_status
);

uint64_t ldk_node_cc4c_ChannelConfig_force_close_avoidance_max_fee_satoshis(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_force_close_avoidance_max_fee_satoshis(
	void* ptr,
	uint64_t value_sat,
	RustCallStatus* out_status
);

int8_t ldk_node_cc4c_ChannelConfig_accept_underpaying_htlcs(
	void* ptr,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_accept_underpaying_htlcs(
	void* ptr,
	int8_t value,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_max_dust_htlc_exposure_from_fixed_limit(
	void* ptr,
	uint64_t limit_msat,
	RustCallStatus* out_status
);

void ldk_node_cc4c_ChannelConfig_set_max_dust_htlc_exposure_from_fee_rate_multiplier(
	void* ptr,
	uint64_t multiplier,
	RustCallStatus* out_status
);

RustBuffer ldk_node_cc4c_generate_entropy_mnemonic(
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_cc4c_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_cc4c_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_ldk_node_cc4c_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_ldk_node_cc4c_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);


